[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "The challenged can be accessed using the navigation menu above, or the links below. If the images are not displaying correctly, they are shown in a PDF uploaded to github.\n\nLink to Supervised ML challenge\nLink to Automated ML with H2O (1)"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Automated H20 (2)",
    "section": "",
    "text": "## H20 (II) Challenge ----\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\n\n\n# 1. Load the training and test dataset ----\n\nproduct_backorders_tbl &lt;- read.csv(\"Data/product_backorders.csv\")\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(product_backorders_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~., data = train_readable_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  #step_mutate_at(JobLevel, StockOptionLevel, fn = as.factor) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# 2. Specify the response and Predictor variables ----\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\Thiel\\AppData\\Local\\Temp\\RtmpCkwhyt\\file95c879217d5c/h2o_Thiel_started_from_r.out\n#&gt;     C:\\Users\\Thiel\\AppData\\Local\\Temp\\RtmpCkwhyt\\file95c8717769f0/h2o_Thiel_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         8 seconds 782 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    5 months and 29 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Thiel_wae888 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.96 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (5 months and 29 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\n\n\n\n\n\nNote\n\n\n\nPlease note, the execution of this code, was causing my computer to crash while rendering the quatro webpage. So the webpage has been published with eval = FALSE\n\n\n\n# 3. run AutoML specifying the stop criterion ----\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  #validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 20,\n  nfolds            = 5 \n)\n\n\n# 4. View the leaderboard ----\n\ntypeof(automl_models_h2o)\nslotNames(automl_models_h2o)\nautoml_models_h2o@leaderboard\nautoml_models_h2o@leader\n# 5. Predicting using the Leader Model\n\nh2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_1_20240619_111333\")\n# Extracts and H2O model name by a position so can more easily use h2o.getModel()\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nautoml_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(6) %&gt;% \n  h2o.getModel()\n# 6. Save the Leader Model ----\n\nh2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_1_20240619_111333\") %&gt;% \n  h2o.saveModel(path = \"04_Modeling/h20_models/\")"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Supervised ML Challenge",
    "section": "",
    "text": "Note\n\n\n\nCode is unfortunately not fully functioning. Errors present when comparing the predicted data to the testing dataset.\n\n\n\nlibrary(tidymodels)\nlibrary(tidyverse)\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart)\n\n# 1.0 Data Import and Preparation ----\n\nbike_features_tbl &lt;- readRDS(\"Data/bike_features_tbl.rds\")\n\nbike_features_tbl %&gt;% distinct(category_2)\n\nbike_features_tbl &lt;- bike_features_tbl %&gt;%\n  select(model:url, `Rear Derailleur`, `Shift Lever`)%&gt;%\n  mutate(id = row_number())\n\n\n# 2.0 Model Building ----\n\nlm_mod &lt;- linear_reg() %&gt;% \n  set_engine(\"lm\")\n\n# 3.0 Create Features with Recipes package ----\n\nset.seed(seed = 105)\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n#training set contains all category_2 values that appear in testing\n\n# Assign training and test data\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\n\nrec &lt;- \n  recipe(price ~.,data = train_tbl) %&gt;%\n  step_rm(url)%&gt;%\n  update_role(id, new_role = \"ID\")%&gt;%\n  #update_role(price, new_role = \"outcome\")%&gt;%\n  step_dummy(\"Rear Derailleur\")%&gt;%\n  step_dummy(\"Shift Lever\")%&gt;%\n  step_zv(all_predictors())\n  #step_discretize(price)\n  #prep()\nrec\n\n\n#train_transformed_tbl &lt;- bake(rec,train_tbl)\n#test_transformed_tbl &lt;- bake(rec,test_tbl)\n\n# 4.0 Bundle Recipe with worflow ----\n\n\nbikes_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_mod) %&gt;% \n  add_recipe(rec)\nbikes_wflow\n\nbikes_fit &lt;- \n  bikes_wflow %&gt;%\n  fit(data = train_tbl)\n\n#predict(bikes_fit, test_tbl)\n\n# 5.0 Evaluate with yardstick package ----\n\npredict(bikes_fit, test_tbl)\n\n\ntesting&lt;- \n  predict(bikes_fit, test_tbl, type = \"class\") %&gt;%\n  bind_cols(test_tbl %&gt;% select(price,model,model_year)) %&gt;% \n\n#testing %&gt;%                   # test set predictions\n  roc_auc(truth = price, .pred)\n\n\nyardstick::metrics(truth = price, estimate = .pred)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Automated machine Learning with H20 (1)",
    "section": "",
    "text": "Note\n\n\n\nif the images aren’t visible, an html version of how the webpage looks on my pc can be found in /content/03_other/“Automated machine Learning with H20(1).html”. The figures can be viewed separately in \\01_journal\\03_data_wrangling_files-html.\n\n\n\n# Libraries \nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n#&gt; Registered S3 method overwritten by 'GGally':\n#&gt;   method from   \n#&gt;   +.gg   ggplot2\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"Data/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndata &lt;- employee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n1. Compensation Features:\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nWhat can be deduced about the interaction between Monthly income and Attrition?\nC is correct, those that are leaving the company have a lower monthly income than those that are staying. This can be seen by the median of the employees that are leaving having a median monthl income approximately equal to the lower quartile monthly income of the employees that have stayed with the company.\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nD is correct, it is difficult to deduce anything based on the visualisation. The median percentage salary hike between the two groups of employees is approximately the same, and there overall shape of the plot on the diagonal is very similiar between the groups.\nWhat can you deduce about the interaction betwen Stock Option Level and Attrition\nB is correct, the employees that are staying have a higher stock option level. Based on the plot on the diagonal, the employyes that are leaving typically have a lower stock option level, typically of level \"0\". This is supported by the box and whisker plot which shows the median for this group being 0. The employees that are staying however have a much higher stock level option, equal to the upper quartile of the group that is leaving. \nSurvey Results\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nA is correct, based on the box and whisker plot, the relationship between attrition and environment satisfaction is negatively skewed, meaning that most of the employees leaving rated their satisfication with the environment lower.\nWhat can you deduce about the interaction between Work Life Balance and Attrition\nB is corret, the employees that are staying have a higher density of 2's and 3's. Shown by the larger red peaks at those values.\nPerformance Data\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nA is correct, the employees that are leaving have a lower density of 3's and 4's\nWork-Life Features\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Over Time and Attrition?\nB is correct, the proportion of employees working overtime that are not leaving is higher than those that are leaving\nTraining and Education\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\n B is correct, the median annual trainings for employees that stay is higher than for those that leave, indicating that the employees who stay typically have a larger number of training sessions per year.\nTime-Based Features\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Years At Company and Attrition\nB is correct, employees that leave tend to have less years working at the company.\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nC, it is difficult to deduce anything. Since for both employees that are leaving and staying, the plots are very similiar for both groups."
  },
  {
    "objectID": "content/01_journal/Automated ML with H2O (1).html",
    "href": "content/01_journal/Automated ML with H2O (1).html",
    "title": "Automated machine Learing with H20 (1)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"Data/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\n\ndata &lt;- employee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n1. Compensation Features:\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nWhat can be deduced about the interaction between Monthly income and Attrition?\nC is correct, those that are leaving the company have a lower monthly income than those that are staying. This can be seen by the median of the employees that are leaving having a median monthl income approximately equal to the lower quartile monthly income of the employees that have stayed with the company.\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nD is correct, it is difficult to deduce anything based on the visualisation. The median percentage salary hike between the two groups of employees is approximately the same, and there overall shape of the plot on the diagonal is very similiar between the groups.\nWhat can you deduce about the interaction betwen Stock Option Level and Attrition\nB is correct, the employees that are staying have a higher stock option level. Based on the plot on the diagonal, the employyes that are leaving typically have a lower stock option level, typically of level \"0\". This is supported by the box and whisker plot which shows the median for this group being 0. The employees that are staying however have a much higher stock level option, equal to the upper quartile of the group that is leaving. \nSurvey Results\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nA is correct, based on the box and whisker plot, the relationship between attrition and environment satisfaction is negatively skewed, meaning that most of the employees leaving rated their satisfication with the environment lower.\nWhat can you deduce about the interaction between Work Life Balance and Attrition\nB is corret, the employees that are staying have a higher density of 2's and 3's. Shown by the larger red peaks at those values.\nPerformance Data\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nA is correct, the employees that are leaving have a lower density of 3's and 4's\nWork-Life Features\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Over Time and Attrition?\nB is correct, the proportion of employees working overtime that are not leaving is higher than those that are leaving\nTraining and Education\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\n B is correct, the median annual trainings for employees that stay is higher than for those that leave, indicating that the employees who stay typically have a larger number of training sessions per year.\nTime-Based Features\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Years At Company and Attrition\nB is correct, employees that leave tend to have less years working at the company.\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nC, it is difficult to deduce anything. Since for both employees that are leaving and staying, the plots are very similiar for both groups."
  },
  {
    "objectID": "content/01_journal/Automated ML with H2O (1).html#header-2",
    "href": "content/01_journal/Automated ML with H2O (1).html#header-2",
    "title": "Automated machine Learing with H20 (1)",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html#link-to-machine-learning-fundamentals-chapter_1_challenge.html",
    "href": "index.html#link-to-machine-learning-fundamentals-chapter_1_challenge.html",
    "title": "My Lab Journal",
    "section": "[Link to Machine Learning Fundamentals] {“Chapter_1_Challenge.html”}",
    "text": "[Link to Machine Learning Fundamentals] {“Chapter_1_Challenge.html”}"
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\nsp_500_daily_returns_tbl&lt;- sp_500_prices_tbl %&gt;%\n  select(symbol,date,adjusted) %&gt;%\n  filter(year(date)&gt;=2018) %&gt;%\n  mutate(prev_adjusted = lag(adjusted,+1)) %&gt;%\n  na.omit() %&gt;%\n  mutate(diff_adjust = adjusted-prev_adjusted) %&gt;%\n  mutate(pct_return = diff_adjust/prev_adjusted) %&gt;%\n  ungroup()\n  \nsp_500_daily_returns_tbl&lt;- sp_500_daily_returns_tbl %&gt;%\n  select(symbol,date,pct_return) %&gt;%\n  ungroup()\n  \n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  select(symbol,date,pct_return) %&gt;%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0) %&gt;%\n  ungroup()\n\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n  mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n  mutate(glance  = k_means %&gt;% map(glance))\n    \n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nk_means_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  select(centers,tot.withinss) %&gt;%\n  \n  ggplot(aes(centers,tot.withinss)) +\n  geom_point(colour = \"#2DC6D6\", size = 4) +\n  geom_line(colour = \"#33fff6\", size = 1)+\n  \n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") +\n  labs(title = \"Skree Plot\")\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n  \n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble(.name_repair = \"unique\") %&gt;%\n  set_names(c(\"x\",\"y\")) %&gt;%\n  bind_cols(\n    stock_date_matrix_tbl %&gt;% select(symbol)\n  )\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\numap_results_tbl %&gt;%\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5) +\n  theme_tq()+\n  ggtitle(\"UMAP Projection\")\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n    pull(k_means) %&gt;%\n    pluck(10)\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\nk_means_clusters_tbl &lt;- k_means_obj %&gt;% \n    augment(stock_date_matrix_tbl) %&gt;%\n    select(symbol, .cluster)\n\numap_kmeans_results_tbl &lt;- umap_results_tbl %&gt;%\n  left_join(k_means_clusters_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")  \n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%\n  mutate(label_text = str_glue(\"Customer: {symbol}\n                                 Cluster: {.cluster}\")) %&gt;%\n  \n  ggplot(aes(V1, V2, color = .cluster)) +\n  \n  # Geometries\n  geom_point(alpha = 0.5) +\n  #geom_label_repel(aes(label = label_text), size = 2, fill = \"#282A36\") +\n  \n  #\n  # Formatting\n  scale_color_manual(values=c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\",\"#614051\",\"#ff00ff\",\"#ffa500\",\"#008000\",\"#00ff00\",\"#810947\",\"#ff0000\")) +\n  labs(title = \"Symbol Segmentation: 2D Projection\",\n       subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\",\n       caption = \"\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#header-2",
    "href": "content/01_journal/02_data_acquisition.html#header-2",
    "title": "Data Acquisition",
    "section": "2.1 Header 2",
    "text": "2.1 Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/01_journal/05_automated_ML.html",
    "href": "content/01_journal/05_automated_ML.html",
    "title": "Automated machine Learing with H20 (1)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"Data/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndata &lt;- employee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n1. Compensation Features:\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nWhat can be deduced about the interaction between Monthly income and Attrition?\nC is correct, those that are leaving the company have a lower monthly income than those that are staying. This can be seen by the median of the employees that are leaving having a median monthl income approximately equal to the lower quartile monthly income of the employees that have stayed with the company.\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nD is correct, it is difficult to deduce anything based on the visualisation. The median percentage salary hike between the two groups of employees is approximately the same, and there overall shape of the plot on the diagonal is very similiar between the groups.\nWhat can you deduce about the interaction betwen Stock Option Level and Attrition\nB is correct, the employees that are staying have a higher stock option level. Based on the plot on the diagonal, the employyes that are leaving typically have a lower stock option level, typically of level \"0\". This is supported by the box and whisker plot which shows the median for this group being 0. The employees that are staying however have a much higher stock level option, equal to the upper quartile of the group that is leaving. \nSurvey Results\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nA is correct, based on the box and whisker plot, the relationship between attrition and environment satisfaction is negatively skewed, meaning that most of the employees leaving rated their satisfication with the environment lower.\nWhat can you deduce about the interaction between Work Life Balance and Attrition\nB is corret, the employees that are staying have a higher density of 2's and 3's. Shown by the larger red peaks at those values.\nPerformance Data\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nA is correct, the employees that are leaving have a lower density of 3's and 4's\nWork-Life Features\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Over Time and Attrition?\nB is correct, the proportion of employees working overtime that are not leaving is higher than those that are leaving\nTraining and Education\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\n B is correct, the median annual trainings for employees that stay is higher than for those that leave, indicating that the employees who stay typically have a larger number of training sessions per year.\nTime-Based Features\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWhat can you deduce about the interaction between Years At Company and Attrition\nB is correct, employees that leave tend to have less years working at the company.\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nC, it is difficult to deduce anything. Since for both employees that are leaving and staying, the plots are very similiar for both groups."
  }
]